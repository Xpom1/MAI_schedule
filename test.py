# import time
#
# from selenium import webdriver
# from selenium_stealth import stealth
# import chromedriver_autoinstaller
#
#
# options = webdriver.ChromeOptions()
# options.add_argument("start-maximized")
# options.add_experimental_option("excludeSwitches", ["enable-automation"])
# options.add_experimental_option('useAutomationExtension', False)
# # options.add_argument("--headless")
# options.add_argument("--log-level=3")
# chromedriver_autoinstaller.install()
# driver = webdriver.Chrome(options=options)
# driver.set_window_size(1920, 1080)
# stealth(driver,
#         languages=["en-US", "en"],
#         vendor="Google Inc.",
#         platform="Win32",
#         webgl_vendor="Intel Inc.",
#         renderer="Intel Iris OpenGL Engine",
#         fix_hairline=True,
#         )
# r = driver.get('https://mai.ru/education/studies/schedule/groups.php?department=%D0%98%D0%BD%D1%81%D1%82%D0%B8%D1%82%D1%83%D1%82+%E2%84%966&course=all')
# time.sleep(4)
# print(driver.find_element_by_xpath('/html/body/main/div/div/div[1]/article').text)
import time

import pandas as pd
import hashlib
import requests
import datetime
from MAI_Tabel import rasp, today

import difflib

# hash_object = hashlib.md5(f'{a}'.encode())
# # group_ = hash_object.hexdigest()
# def may_be(find):
#     r = requests.get(f'https://public.mai.ru/schedule/data/groups.json').json()
#     grup = []
#     for i in r:
#         grup.append(i.get('name'))
#     if find in grup:
#         return [find], 1
#     else:
#         otv = difflib.get_close_matches(find, grup, cutoff=.8)
#         if len(otv) > 0:
#             return otv, 0
#         else:
#             return otv, -1
#
# may, ch = may_be('М10-314Бки-20')
# print(may, ch)


# search='GeForce GTX 1060 3G'
#
# heap=['NVIDIA GeForce GTX 1060 6GB',
# 'NVIDIA GeForce GTX 1060 3GB',
# 'NVIDIA GeForce GTX 1060',
# 'NVIDIA GeForce GTX 1060 5GB',
# 'NVIDIA GeForce GTX 1060 with Max-Q Design']
#
# print(difflib.get_close_matches(search, heap, cutoff=.8))


# print(choose_week('М6О-108Б-22'))


# print(today('М6О-108Б-22'))

# a = 3
# if a>0:
#     if a == 1:
#         print('1')
#     else:
#         print('no 1')
# else:
#     print("NO")


# a = 'Линейная алгебра'
# print(a[:10])
# import re
# if re.fullmatch(r'\d{2}.\d{2}.\d{4}', r'15.11.2022'):
#     print(1)
# a = 'М6О-308Б-21'
# hash_object = hashlib.md5(f'{a}'.encode())
# group_ = hash_object.hexdigest()
# r = requests.get(f'https://public.mai.ru/schedule/data/{group_}.json')
# print(r.status_code)
# print(datetime.date.today().strftime("%d.%m.%Y") in list(r.keys())[1:])

# print(datetime.date.today().strftime('%d.%m.%Y') > '13.10.2022')


# week_preview = {}
# wik = ['']
# for i in list(r.keys())[1:]:
#     day = pd.to_datetime(f'{i}', format='%d.%m.%Y')
#     if day.date() > datetime.date.today():
#         week_ = []
#         pn = day + datetime.timedelta(days=-day.weekday())
#         for i in range(0, 6):
#             d = pn + datetime.timedelta(days=i)
#             week_.append(d.strftime("%d.%m.%Y"))
#         if '-'.join(week_) != '-'.join(wik):
#             week_preview[(f'{week_[0][:5]}-{week_[-1][:5]}')] = []
#         wik = week_.copy()

import sqlite3

# import math
# print(round(0.000000000000002) == 0)
# print(0.000000000000002 == 0)
# # print(0 == 0.0000)

# import sqlite3
#
# db = sqlite3.connect('test.db', check_same_thread=False)
# sql = db.cursor()
# sql.execute("""CREATE TABLE IF NOT EXISTS moders (
#     user INTEGER,
#     group_ TEXT
# )""")
# db.commit()

# print('123 123'.split('~')[3])


# for i in a:
#     print()
# print(get_dz_form_homework('02.10.2022', 'М6О-208Б-21', 'Инжегра7'))
# add_dz_to_homework('02.10.2022', 'М6О-208Б-21', 'Инжеграф', 'Чертеж Е2')

#
# import time
#
#
# # def rate_limit(limit: int):
# #     def decorator(func):
# #         setattr(func, "throttling_rate_limit", limit)
# #         return func
# #
# #     return decorator
#
#
# def time_to_do(func):
#     def decorator(*args, **kwargs):
#         start = time.time()
#         func(*args, **kwargs)
#         print(time.time() - start)
#     return decorator
#
#
# @time_to_do
# def work(a: int, b: int):
#     print(f'Сумма = {a + b}')


# import threading
# import time
# import os
# import json
#
#
# def check_file_update():
#     arr = os.listdir('data')
#     for i in arr:
#         req = requests.get(f'https://public.mai.ru/schedule/data/{i}').json()
#         with open(f'data/{i}') as file:
#             one, two = len(file.read()), len(str(req))
#             print(one, two)
#         if one != two:
#             with open(f'data/{i}', 'w+') as file:
#                 json.dump(req, file, ensure_ascii=False)
#                 print('Change')
#         time.sleep(5)
#
#
# def get_data():
#     while True:
#         time.sleep(60)
#         check_file_update()
#
#
# thr = threading.Thread(target=get_data, daemon=True)
# thr.start()

# def f(x: int) -> int:
#     return x

# ins = {}
# kuers = {}
# a = ['М6О_108Б_22', 'М6О_101С_22', 'Т12О_309Б_20', 'М6О_116Б_22', 'М6О_116Б_22', 'М6О_116Б_22', 'М6О_108Б_22', 'М6О_108Б_22', 'М6О_108Б_22', 'М6О_110Б_22', 'М6О_314Б_20', 'М6О_309Б_20', 'М6О_314Б_20', 'М7О_301Б_20', 'М6О_108Б_22', 'М6О_108Б_22', 'М6О_108Б_22', 'М6О_314Б_20', 'М7О_301Б_20', 'М6О_109Б_22', 'М6О_116Б_22', 'М6О_108Б_22', 'М5О-221Бк-21', 'М6О_116Б_22', 'М6О_108Б_22', 'М6О_116Б_22', 'М6О_116Б_22', 'М6О_108Б_22', 'М6О_108Б_22', 'М3О_404С_19', 'М3О_210Б_21', 'М2О_205Б_21', 'М7О_202С_20', 'М7О_202С_20', 'М6О_309Б_20', 'М6О_309Б_20', 'М6О_309Б_20', 'М3О_326Б_19', 'М6О_309Б_20', 'М6О_314Б_20', 'М6О_204С_21', 'М7О_111С_22', 'М8О_109Б_22', 'М4О_501С_18', 'М8О_108Б_22', 'М1О_204С_21', 'М1О_106Б_22', 'М1О_108С_22', 'М8О_106Б_22', 'М2О_104Б_22', 'М7О_108С_22', 'М1О_110Б_22', 'Т11О_101Б_22', 'М6О_109Б_22', 'М3О_133Б_22', 'М6О_109Б_22', 'М8О_111Б_22', 'М1О_102С_22', 'М3О_303Б_20', 'М9О_201Б_21', 'М6О_403Б_19', 'М1О_301С_20', 'М1О_214Бки_21', 'М4О_108Б_22', 'М2О_109Б_22', 'М5О_105Бк_22', 'М3О_310Б_20', 'М3О_105С_22', 'М7О_504С_18', 'М1О_204С_21', 'М1О_111Б_22', 'М3О_205С_21', 'М8О_111Б_22', 'М6О_116Б_22', 'М2О_201С_21', 'МИО_106Бк_22', 'М8О_102Б_22', 'МИО_307Бк_20', 'М1О_309Б_20', 'М3О_202С_21', 'М2О_101С_22', 'М3О_112Б_22', 'Т11О_102Б_22', 'М2О_105Б_22', 'М1О_101С_22', 'М7О_101Б_22', 'М8О_205Б_21', 'М6О_403Б_19', 'М6О_403Б_19', 'М4О_411Б_19', 'МИО_202Бк_21', 'М6О_113М_22', 'М6О_413Б_19', 'М5О_101Мк_22', 'М5О_124Бк_22', 'М6О_108С_22', 'М3О_321Б_20', 'М8О_104Б_22', 'М8О_111Б_22', 'М6О_109Б_22', 'М3О_106С_22', 'М1О_403Б_19', 'М2О_310С_20', 'М6О_211Б_21', 'М4О_109Б_22', 'М6О_208С_21', 'М6О_510С_18', 'М6О_308С_20', 'М6О_403Б_19', 'М6О_405Б_19', 'М1О_403Б_19', 'М6О_403Б_19', 'М6О_203Б_21', 'М5О_305Бк_20', 'М6О_111Б_22', 'М2О_110Б_22', 'М2О_110Б_22', 'М1О_302С_20', 'Т11О_208Б_21', 'М8О_108Б_22', 'М3О_404С_19', 'М6О_510С_18', 'М8О_111Б_22', 'М6О_109Б_22', 'М6О_211Б_21', 'М6О_109Б_22', 'М5О_424Бк_19', 'М5О_113Бк_22', 'М6О_101М_22', 'М2О_305Б_20', 'М3О_505С_18', 'М3О_106С_22', 'М1О_103Б_22', 'М6О_211Б_21', 'М6О-120С-22', 'М3О_110М_22', 'М6О_106Б_22', 'М6О_109Б_22', 'М6О_109Б_22', 'МИО_402Бк_19', 'М4О_101С_22', 'М8О_208Б_21', 'М3О_123Б_22', 'М6О_120Б_22', 'М9О_501С_18', 'М3О_306С_20', 'М1О_107С_22', 'М9О_103М_22', 'М1О_103С_22', 'М8О_207Б_21', 'М6О_104Б_22', 'М6О_211Б_21', 'М3О_205С_21', 'М5О_102Бк_22', 'М9О_103М_22', 'М6О_510С_18', 'М9О_103М_22', 'М5О_110Б_22', 'М5О_110М_22', 'Т11О_102Б_22', 'М6О_211Б_21', 'М6О_105Б_22', 'М8О_106Б_22', 'М3О_109Б_22', 'М6О_108Б_22', 'М3О_109Б_22', 'М3О_109Б_22', 'М1О_105С_22', 'М1О_109Б_22', 'М6О_121С_22', 'М8О_107Б_22', 'М9О_103М_22', 'М4О_110Б_22', 'М3О_132Б_22', 'М6О_116Б_22', 'М6О_108Б_22', 'М3О_132Б_22', 'М7О_101Б_22', 'М4О_101Б_22', 'М7О_102Б_22', 'М1О_312Б_20', 'М8О_113Б_22', 'М3О_210Б_21', 'М7О_302Б_20', 'М1О_103С_22', 'М6О_105С_22', 'М3О_119М_22', 'М6О_411Б_19', 'М3О_133Б_22', 'М6О_107Б_22', 'М8О_205Б_21', 'М6О_116Б_22', 'М2О_209Б_21', 'М2О_104С_22', 'М2О_407Б_19', 'М5О_102Бк_22', 'М2О_407Б_19', 'М2О_109С_22', 'М6О_120С_22', 'МИО_103Бк_22', 'М6О_111С_22', 'М8О_206Б_21', 'М6О_204С_21', 'М2О_105Б_22', 'М6О_107Б_22', 'М9О_402Б_19', 'М3О_217Бк_21', 'Т11О_208Б_21', 'М9О_402Б_19', 'М6О_108Б_22', 'М6О_115Б_22', 'М9О_103М_22', 'М3О_319Бк_20', 'Т11О_208Б_21', 'М3О_319Бк_20', 'М3О_410Б_19', 'М9О_106М_22', 'М3О_319Бк_20', 'М6О_505С_18', 'М3О_119М_22', 'М3О_110Б_22', 'М2О-101Б-22', 'М8О_307Б_20', 'М3О_134Б_22', 'М6О_112Б_22', 'М8О_305Б_20', 'МИО_301Бк_20', 'М3О_119М_22', 'М3О_110Б_22', 'М8О_104Б_22', 'М6О_305Б_20', 'М1О_112Б_22', 'М3О_125Бк_22', 'М2О_407Б_19', 'М1О_109Б_22', 'М8О_111Б_22', 'М6О_514С_18', 'М8О_102Б_22', 'М5О_121Бк_22', 'М6О_204Б_21', 'М8О-106Б-22', 'М8О_108Б_22', 'М6О_508С_18', 'М2В_101С_22', 'М9О_201Б_21', 'М7О_101Б_22', 'М7О_101Б_22', 'М7О_103С_22', 'М1О_104С_22', 'М6О_116Б_22', 'М6О_107Б_22', 'М6О_107Б_22', 'М7О_103С_22', 'М3О_503С_18', 'М7О_103С_22', 'М3О_210Б_21', 'М1О_103Б_22', 'М1О_106Б_22', 'М8О_101Б_22', 'М6О_116Б_22', 'М6О_108С_22', 'М6О_109Б_22', 'М6О_109Б_22', 'М4О_113Б_22', 'М1О_406С_19', 'М6О_111Б_22', 'Т11О_101Б_22', 'М7О_111С_22', 'М3О_426Б_19', 'М3О_335Б_20', 'М6О_204Б_21', 'М1О_407С_19', 'М6О_501С_18', 'М6О_211Б_21', 'М3О_404С_19', 'М2О_115Б_22', 'М6О_116А_22', 'М3О_132Б_22', 'М6О_108Б_22', 'М8О_114М_22', 'М7О_102Б_22', 'М6О_103С_22', 'М3О_214Б_21', 'М6О_215М_21', 'М3О_232Б_21', 'М3О_319Бк_20', 'М3О_232Б_21', 'М3О_232Б_21', 'М6О_114М_22', 'М3О_232Б_21', 'М6О_111С_22', 'М5О_113Бк_22', 'М6О_211С_21', 'М3О_304С_20', 'М6О_108Б_22', 'М3О_232Б_21', 'М8О_214М_21', 'М2О_104С_22', 'М1О_115М_22', 'М3О_232Б_21', 'М8О_113Б_22', 'М3О_132Б_22', 'М3О_112Б_22', 'М9О_501С_18', 'М4О_104С_22', 'М6О_203Б_21', 'М3О_303Б_20', 'МИО_101Бк_22', 'М7О_102Б_22', 'М1О_101Б_22', 'М6О_120С_22', 'М3О_112Б_22', 'М1О_101Б_22', 'М6О_403Б_19', 'М1О_101Б_22', 'М6О_314Б_20', 'М1О_201Б_21', 'М4О_104С_22', 'М1О_201Б_21', 'М1О_203Б_21', 'МИО_102Бк_22', 'М3О_217М_21', 'М6О_211Б_21', 'М6О_211Б_21', 'М1О_101Б_22', 'М4О_104С_22', 'М1О_101Б_22', 'М3О_125Бк_22', 'М6О_304Б_20', 'М6О_104С_22', 'М2О_407Б_19', 'М6О_112Б_22', 'М3О_133Б_22', 'М3О_232Б_21', 'М3О_109Б_22', 'М8О_105Б_22', 'М7О_202Б_21', 'М3О_112Б_22', 'М6О_215М_21', 'М3О_110Б_22', 'М6О_115Б_22', 'М3О_109Б_22', 'М6О_112Б_22', 'М5О_307Бк_20', 'М3О_232Б_21', 'М5О_224Бк_21', 'М6О_405Б_19', 'М7О_202Б_21', 'М6О_110С_22', 'МИО_201Бк_21', 'М4О_402Б_19', 'М6О_314Б_20', 'М6О_514С_18', 'М7О_202Б_21', 'М8О_110Б_22', 'М6О_120С_22', 'М3О_128М_22', 'М2О_110С_22', 'М8О_101Б_22', 'М2О_104С_22', 'М9О_404Б_19', 'М4О_411Б_19', 'М5О_125Бк_22', 'М3О_109Б_22', 'Т12О_111М_22', 'М1О_101С_22', 'М5О_324Бк_20', 'М5О_325Бк_20', 'М7О_101С_22', 'М1О_301Б_20', 'М3О_104С_22', 'М8О_107М_22', 'М3О_117М_22', 'М6О_115Б_22', 'Т12О_101С_22', 'М5О_426Бк_19', 'М5О_304Бк_20', 'М5О_304Бк_20', 'М4О_101С_22', 'М6О_204С_21', 'М6О_103С_22', 'М6О_204С_21', 'М1О_314Бки_20', 'Т11О_101Б_22', 'М4О_301С_20', 'М2О_106Б_22', 'М1О_112Б_22', 'Т11О_101Б_22', 'М3О_335Б_20', 'М3О_111Б_22', 'М4О_103С_22', 'М3О_110Б_22', 'М1О_109Б_22', 'М8О_116А_22', 'М6О_109Б_22', 'Т11О_208Б_21', 'М3О_232Б_21', 'М8О_101Б_22', 'М6О_108Б_22', 'М2О_109С_22', 'М5О_105Бк_22', 'М1О_103С_22', 'М3О_232Б_21', 'М8О_105Б_22', 'М9О_301С_20', 'М1О_111Б_22', 'М3О_109Б_22', 'М3О_105С_22', 'М5О_221Бк_21', 'М8О_107Б_22', 'М4О_113Б_22', 'М3О_210Б_21', 'М5О_221Бк_21', 'М1О_111Б_22', 'М8О_107Б_22', 'М5О_221Бк_21', 'М8О_110Б_22', 'М3О_103С_22', 'М6О_106Б_22', 'Т12О_102М_22', 'М1О_203Б_21', 'М1О_203Б_21', 'М1О_307С_20', 'М3О-119Бк-22', 'М3О_110Б_22', 'М6О_105Б_22', 'М1О_203Б_21', 'М4О_202С_21', 'М2О_106Б_22', 'М3О_103С_22', 'М6О_108Б_22', 'М6В_102Мк_22', 'М5О_221Бк_21', 'М1О_112Б_22', 'М3О_403С_19', 'М5О_224Бк_21', 'М4О_106Б_22', 'М2О_109С_22', 'М7О_111С_22', 'М6О_107Б_22', 'М1О_103Б_22', 'М3О_134Б_22', 'М3О_133Б_22', 'М5О_221Бк_21', 'М3О_221Б_21', 'М3О_319Бк_20', 'М3В_137Бк_22', 'М6О_205С_21', 'Т12О_107Б_22', 'М6О_305Б_20', 'М3О_133Б_22', 'М7О_110С_22', 'Т12О_309Б_20', 'М5О_119Бк_22', 'М3О_325Бк_20', 'М3О_128М_22', 'М6О_117Бки_22', 'М3О_118М_22', 'М9О_201Б_21', 'М1О_301Б_20', 'М6О_104С_22', 'М3В_137Бк_22', 'М3В_137Бк_22', 'М3О_321Б_20', 'М3О_321Б_20', 'М6О_103С_22', 'М3О_112Б_22', 'М1О_104Б_22', 'М5О_307Бк_20', 'М3О_228М_21', 'М6О_514С_18', 'М1О_411Б_19', 'М1О_101Б_22', 'М8О_107Б_22', 'М3О_135Б_22', 'М4О_106С_22', 'М5О_202Бк_21', 'М1О_201Б_21', 'М3О_102С_22', 'М2О_206М_21', 'М4О_101Б_22', 'МИО_106Бк_22', 'М3О_102С_22', 'МИО_303Бк_20', 'М6О_309Б_20', 'М4О_111Б_22', 'М6О_111Б_22', 'М3О_103Б_22', 'М3О_101Б_22', 'М6О_510С_18', 'М6О_413Б_19', 'М2О_209С_21', 'М5О_124Бк_22', 'М5О_111Бк_22', 'М5О_225Бк_21', 'М5О_110Б_22', 'М5О_211Бк_21', 'М5О_225Бк_21', 'М5О_213Бк_21', 'М5О_102Бк_22', 'М5О_121Бк_22', 'М5О_124Бк_22', 'М5О_219Бк_21', 'М5О_424Бк_19', 'М5О_219Бк_21', 'М5О_424Бк_19', 'М5О_424Бк_19', 'М5О_225Бк_21', 'М5О-121Бк-22', 'М5О_102Бк_22', 'М5О_224Бк_21', 'М5О_105Бк_22', 'М5О_113Бк_22', 'М5О_125Бк_22', 'М5О_102Бк_22', 'М5О_110Б_22', 'М5О_125Бк_22', 'М5О_113Бк_22', 'М5О_225Бк_21', 'М5О_211Бк_21', 'М5О_202Бк_21', 'М5О_225Бк_21', 'МИО_201Бк_21', 'М5О_325Бк_20', 'М5О_125Бк_22', 'М5О_225Бк_21', 'М5О_113Бк_22', 'М5О_119Бк_22', 'М5О_210Б_21', 'М5О_111Бк_22', 'М5О_113Бк_22', 'М5О_119Бк_22', 'М5О_110Б_22', 'М5О_213Бк_21', 'М5О_202Бк_21', 'М5О_105Бк_22', 'М5О_424Бк_19', 'М5О_304Бк_20', 'М5О_124Бк_22', 'М5О_225Бк_21', 'М5О_102Бк_22', 'М5О_202Бк_21', 'М5О_421Бк_19', 'М5О_113Бк_22', 'М5О_113Бк_22', 'М9О_307Бк_20', 'М5О_102Бк_22', 'М5О_119Бк_22', 'М5О_125Бк_22', 'М5О_225Бк_21', 'М5О_424Бк_19', 'М5О_424Бк_19', 'М6О_104С_22', 'М5О_124Бк_22', 'М6О_111Б_22', 'М6О_101Б_22', 'М5О_402Бк_19', 'М5О_111Бк_22', 'М6О_115М_22', 'М5О_202Бк_21', 'М6О_104Б_22', 'Т11О_203Б_21', 'М9О_301С_20', 'М8О_412Б_19', 'М6О_204Б_21', 'М6О-108Б-22', 'М3О_134Б_22', 'М5О_304Бк_20', 'М4О_111Б_22', 'М6О_202С_21', 'М6О_110Б_22', 'М6О_111С_22', 'М9О_201С_21', 'М3О_103С_22', 'М5О_412Бк_19', 'М5О_412Бк_19', 'М3О_117Бк_22', 'М8О_201Б_21', 'М5О_411Бк_19', 'М5О_412Бк_19', 'М8О_201Б_21', 'М3О_219Бк_21', 'М5О_412Бк_19', 'М6О_403Б_19', 'М5О_412Бк_19', 'М3О_129М_22', 'М5О_411Бк_19', 'М1О_205С_21', 'М6О_102С_22', 'М1О_205С_21', 'М3О_121Б_22', 'М9О_407Бк_19', 'М3О_307Б_20', 'М8О_305Б_20', 'М1О_104Б_22', 'М2О_104Б_22', 'М2О_101С_22', 'М2О_101С_22', 'М2О_101С_22', 'М5О_411Бк_19', 'М5О_119Бк_22', 'М2О_306Б_20', 'М3О_123Б_22', 'М8О_307Б_20', 'М8О_307Б_20', 'М6О_301С_20', 'М3О_311Б_20', 'М6О_120С_22', 'М3О_103Б_22', 'М3О_401С_19', 'Т11О_202Б_21', 'М3О_235Б_21', 'Т11О_202Б_21', 'М3О_335Б_20', 'М5О_110Б_22', 'Т11О_202Б_21', 'М3О_232Б_21', 'М5О_421Бк_19', 'Т11О_202Б_21', 'Т11О_202Б_21', 'М1О_203Б_21', 'М5О_124Бк_22', 'М8О_113Б_22', 'М6О_116Б_22', 'МИО_101Бк_22', 'Т11О_201Б_21', 'М3О_133Б_22', 'М3О_133Б_22', 'М3О_133Б_22', 'М5О_421Бк_19', 'М3О_133Б_22', 'М3О_436Б_19', 'М1О_203Б_21', 'М3О_234Б_21', 'М3О_136Б_22', 'М3О_136Б_22', 'М3О_234Б_21', 'М3О_118М_22', 'Т11О_102Б_22', 'М8О_202Б_21', 'М8О_110Б_22', 'М6О_115М_22', 'М8О_307Б_20', 'МИВ_102Бк_22', 'М1О_106Б_22', 'М7О_103С_22', 'М3В_108Мк_22', 'М1О_102С_22', 'М3О_312Б_20', 'М3О_321Б_20', 'М6О_101Б_22', 'М6О_101Б_22', 'М6О_101Б_22', 'М6О_101Б_22', 'Т11О_102Б_22', 'М3О_503С_18', 'М4О_101С_22', 'М4О_411Б_19', 'М6О_116Б_22', 'М7О_210С_21', 'М5О_121Бк_22', 'М6О_304Б_20', 'М6О_120С_22', 'М7О_108С_22', 'М7О_508С_18', 'М3О_119М_22', 'М9О_301С_20', 'М6О_201Б_21', 'М6О_307Б_20', 'М5О-412Бк-19', 'М3О_123Б_22', 'М6О_116Б_22', 'М6О_120С_22', 'М3О_103Б_22', 'М6О-108Б-22', 'М5О_219Бк_21', 'М6О_108Б_22', 'М4О_113Б_22', 'М5О_105Бк_22', 'М4О_101С_22', 'М5О_110А_22', 'М6О_206Б_21', 'М8О_307Б_20', 'М5О_102Бк_22', 'М2О_101Б_22', 'М6О_102С_22', 'М8О_308Б_20', 'М7О_211С_21', 'М6О_204Б_21', 'Т11О-203Б-21', 'М6О_108Б_22', 'М2О_101С_22', 'МИО-101Бк-22', 'М6О_108Б_22', 'М5О-210Б-21', 'М5О-210Б-21', 'М5О-413Бк-19', 'М5О-413Бк-19', 'М5О-413Бк-19', 'М5О-413Бк-19', 'М6О_501С_18', 'М7О_508С_18', 'М3О-303С-20', 'М6О-108Б-22', 'М9О-301С-20', 'М7О_107С_22', 'М6О_105С_22', 'МИО-102Бк-22', 'Т11О_310Б_20', 'М5О-421Бк-19', 'Т12О_106Б_22', 'М3О_426Б_19', 'М9О_201Б_21', 'М5О-426Бк-19', 'М6О_203Б_21', 'М4О_113Б_22', 'М1О_312Б_20', 'Т11О-201Б-21', 'М1О_108С_22', 'М3О_106С_22', 'М1О_204С_21', 'М3О_135Б_22', 'М5О-102Бк-22', 'М1О-203Б-21', 'М3О_202С_21', 'М3О_109Б_22', 'М3О_110Б_22', 'М3О-109Б-22']
# for i in a:
#     if '-' in i:
#         gr = i.split('-')[0]
#     else:
#         gr = i.split('_')[0]
#     if gr not in ins:
#         ins[gr] = 1
#     else:
#         ins[gr] += 1
#
#     if '-' in i:
#         data = i.split('-')[1][0]
#     else:
#         data = i.split('_')[1][0]
#     if data not in kuers:
#         kuers[data] = 1
#     else:
#         kuers[data] += 1
#
# print(ins)
# print(kuers)
# a = [
#     (1, 2, 3),
#     (4, 5, 6),
#     (7, 8, 9)
# ]
# print(a)
# print("-"*20)
# print(list(zip(*a)))

# import sys
#
# a = [1, 2, 3]
# import requests
# try:
#     r = requests.get('https://public.mai.ru/schedule/data/groups.json')
# except requests.exceptions.ConnectionError:
#     r = "Connection refused"
#
# print(r)
# Это фикс ошибки с очень долгим ожиданием, переделать
#
# def f(i): return i + 1
#
#
# b = map(f, a)
#
# print(sys.getsizeof(list(b)))
# print(sys.getsizeof(b))


# arr = [960, 19470, 5370, 19627, 29628, 27547, 13118, 12946, 8684, 13213, 28738, 1136, 14366, 26872, 3199, 3502, 24444,
#        8485, 23939, 9055, 970, 24596, 9955, 13840, 1796, 19525, 24869, 6593, 27997, 19008, 16446, 6176, 26283, 12719,
#        1280, 27774, 11066, 8838, 1741, 993, 1294, 26249, 26037, 14092, 2438, 4178, 28426, 16822, 23868, 2305, 1960,
#        23314, 3475, 24622, 28034, 12985, 3454, 21529, 13371, 15043, 26640, 16196, 4146, 11176, 25490, 15344, 2423,
#        15197, 1053, 26380, 7444, 21876, 29840, 26891, 15859, 9725, 20963, 16399, 27265, 7266, 20804, 4575, 12153, 23322,
#        10931, 8509, 10588, 11210, 240, 4294, 22218, 20784, 19575, 4106, 3475, 14687, 14518, 3774, 28975, 24521, 26167,
#        5166, 19697, 24397, 9706, 29561, 2853, 23797, 4339, 7540, 5686, 3473, 20127, 7289, 23978, 23084, 28723, 23241,
#        29701, 16720, 960, 9961, 11823, 28990, 12634, 8106, 23993, 27594, 1401, 29430, 21681, 29873, 19457, 234, 20350,
#        6802, 29654, 27963, 25823, 21260, 7602, 27800, 24679, 19018, 5129, 5978, 17008, 17799, 12241, 24406, 20352, 7742,
#        902, 18204, 9882, 26696, 7027, 16459, 5938, 29002, 19289, 22593, 26726, 13617, 16403, 13490, 18573, 10043, 24659,
#        10957, 23142, 501, 10911, 14397, 27032, 21671, 22015, 19100, 27023, 21748, 18945, 27626, 22926, 444, 26059, 5646,
#        22452, 12402, 11770, 4616, 12866, 29984, 24819, 22103, 19289, 6441, 1896, 27982, 27257, 67, 27333, 22466, 2963,
#        4627, 5292, 7699, 27085, 12636, 16155, 12731, 13923, 7525, 9454, 7574, 8547, 18238, 700, 28119, 15413, 15064,
#        12657, 21931, 22840, 21672, 28962, 12435, 2570, 23951, 21375, 764, 14785, 24294, 28449, 10491, 14153, 13348,
#        22323, 21104, 14248, 5551, 17615, 750, 10673, 9236, 2001, 2922, 23650, 13595, 3862, 28020, 9470, 13207, 20845,
#        4636, 23475, 25360, 14738, 21284, 21702, 29757, 23258, 10824, 15321, 11816, 16054, 26873, 2886, 26827, 15118,
#        4363, 28017, 5837, 810, 14127, 17211, 1517, 18867, 16894, 16895, 2429, 10703, 3918, 14038, 11119, 9896, 26454,
#        18728, 3302, 19722, 29888, 10959, 23116, 19715, 14252, 12139, 6419, 12533, 8005, 14590, 20082, 26607, 4363,
#        24294, 22859, 18843, 5763, 2152, 4106, 9656, 8742, 24312, 10308, 4869, 29272, 21147, 24100, 14917, 2907, 17588,
#        13343, 9542, 2625, 9484, 8170, 10688, 21401, 3500, 11366, 22766, 9291, 25680, 25922, 5677, 19488, 19183, 5093,
#        16734, 14258, 7223, 21390, 26862, 26895, 3174, 11366, 2678, 13916, 19896, 21207, 1732, 3392, 18965, 25048, 18226,
#        2818, 2456, 17419, 6508, 22429, 9064, 24779, 27063, 15932, 21080, 22922, 18801, 19404, 12111, 26785, 5317, 4856,
#        21732, 6343, 15604, 27044, 10728, 22069, 26073, 19760, 2724, 15491, 23912, 29934, 13760, 1688, 10475, 14985,
#        27883, 1956, 27475, 13200, 2986, 22549, 3633, 4020, 7106, 16418, 19810, 25812, 17693, 19125, 14436, 15130, 19889,
#        8099, 8880, 18690, 18653, 5406, 5872, 16454, 24998, 9354, 5220, 1457, 15905, 15854, 18380, 16397, 19769, 26104,
#        9525, 23882, 6803, 9927, 14832, 15590, 22131, 782, 22153, 24184, 42, 16860, 562, 4150, 26136, 1649, 27223, 20025,
#        22978, 20257, 22752, 21959, 26846, 10796, 11485, 19483, 15905, 20356, 11045, 12562, 11765, 1190, 22106, 17069,
#        26579, 22138, 12448, 23264, 1903, 19084, 27936, 26749, 9493, 8418, 8846, 26600, 10268, 12401, 9891, 7987, 26103,
#        13311, 16027, 12041, 10061, 12108, 26847, 8410, 20902, 6422, 27277, 14008, 8964, 12858, 22193, 25693, 24378,
#        3895, 29020, 14320, 28534, 5125, 28228, 5789, 26082, 8121, 25229, 4915, 25643, 19841, 3642, 28106, 13021, 5511,
#        25311, 1632, 1147, 22118, 2697, 22393, 2835, 28190, 4121, 16889, 19383, 10987, 2875, 14649, 10070, 26729, 6095,
#        6714, 17916, 13320, 8610, 4211, 25195, 2867, 27119, 28214, 3908, 27740, 7972, 23775, 9740, 13368, 21315, 16388,
#        22638, 11890, 1870, 10304, 26540, 24070, 27786, 17676, 9847, 14452, 14796, 7351, 26139, 1773, 9948, 29345, 16811,
#        28315, 187, 24350, 18766, 25693, 22039, 29996, 10133, 22320, 25339, 20799, 23739, 24575, 8154, 8497, 12135, 714,
#        27152, 24333, 3955, 24559, 9887, 18205, 14676, 13341, 18271, 27222, 12424, 800, 25542, 28558, 24216, 4701, 12636,
#        22707, 25909, 26096, 27710, 19249, 4160, 12605, 28785, 3967, 27989, 10788, 17727, 24404, 2788, 3371, 14352,
#        27130, 29109, 19630, 5745, 23803, 11287, 7930, 17698, 13288, 15576, 29114, 1152, 26207, 13005, 25373, 26283,
#        22106, 14213, 15653, 17883, 11866, 21407, 25643, 10109, 28636, 16882, 8810, 4883, 21791, 8433, 24267, 28409,
#        10575, 11340, 9054, 7670, 29960, 24832, 25953, 831, 28572, 24717, 24699, 27799, 12352, 2307, 17084, 16071, 6478,
#        22272, 29556, 21489, 23825, 23183, 24316, 4788, 18168, 18250, 26221, 13138, 7806, 16099, 14809, 505, 1464, 5644,
#        14778, 19757, 15630, 17247, 29760, 2630, 11182, 16362, 23720, 26512, 18608, 19668, 26831, 23760, 17424, 366,
#        12379, 2127, 28890, 24800, 10380, 3014, 16923, 10564, 21698, 25119, 17910, 24550, 255, 7004, 12920, 13951, 24383,
#        5266, 17187, 16138, 19437, 411, 1312, 2727, 11802, 17933, 22021, 19528, 3226, 25975, 11836, 24491, 5135, 11409,
#        20114, 18903, 15564, 27695, 24347, 17876, 20330, 12456, 15388, 18908, 25123, 6000, 13732, 5522, 5917, 1071, 3576,
#        22721, 9899, 9143, 4317, 17292, 12453, 1658, 11478, 24229, 22704, 29243, 25725, 14931, 23772, 23562, 12301,
#        11615, 16803, 13277, 18689, 24414, 27570, 19300, 15745, 6475, 11988, 6728, 21866, 16209, 4599, 4957, 846, 3414,
#        18576, 19130, 15848, 23684, 16395, 7693, 22967, 10993, 1335, 6485, 13343, 18394, 23386, 25844, 23229, 22544,
#        17681, 5796, 19985, 20832, 8043, 11134, 8815, 29870, 20914, 10776, 5843, 10217, 7236, 24924, 5641, 11354, 16048,
#        7544, 5067, 28842, 27111, 806, 16008, 1312, 13012, 3286, 24136, 6030, 9019, 2575, 29047, 15004, 12666, 16586,
#        5385, 23926, 8614, 25408, 22176, 8841, 14582, 8835, 28206, 25470, 16170, 20693, 2331, 24022, 10749, 8057, 9832,
#        26677, 3099, 29596, 13908, 18822, 15200, 1881, 22973, 12032, 14464, 24646, 9348, 4229, 1369, 20700, 1991, 17804,
#        2045, 3388, 11817, 8757, 3218, 28257, 28395, 28880, 29413, 27286, 16982, 12128, 22255, 15714, 6820, 23272, 4892,
#        19554, 28493, 16060, 4363, 10751, 15323, 12963, 4473, 17946, 26401, 29151, 5442, 19750, 653, 4495, 15402, 18193,
#        7437, 22042, 26762, 29103, 3118, 20501, 15690, 20943, 28003, 8594, 26440, 2719, 1240, 27753, 7768, 21320, 6593,
#        17649, 10209, 21690, 22345, 27071, 24102, 13505, 3820, 20142, 13178, 21265, 29646, 10044, 13311, 10299, 9639,
#        7276, 10587, 10861, 10753, 28438, 11256, 523, 28946, 17431, 9247, 23814, 661, 25639, 3565, 726, 4302, 25057,
#        1522, 27414, 8755, 5910, 19652, 7273, 16958, 22918, 20031, 9522, 19000, 18865, 623, 13826, 18982, 11448, 4813,
#        27380, 326, 25959, 5002, 29742, 27321, 2755, 23030, 20035, 25940, 14892, 9363, 23724, 22093, 16092, 29563, 23085,
#        14915, 27775, 15175, 25294, 1499, 3898, 6389, 6964, 4213, 1247, 16789, 17700, 21796, 18446, 13595, 13498, 422,
#        18492, 19078, 18773, 28851, 21099, 6322, 18319, 16618, 20185, 17845]
#
# c = 1
# otv = 0
# minn = min(arr)
# print(minn)
# for j in range(len(arr)):
#     for i in range(len(arr)):
#         a = arr[i:i + c]
#         if len(a) == c and minn not in a:
#             otv += min(a)
#             print(a)
#         else:
#             otv += minn
#     c += 1
# print(otv)


import requests
import json
# r = requests.get('https://public.mai.ru/schedule/data/groups.json').json()
# with open(f'text.json', 'w+', encoding='utf-8') as file:
#     json.dump(r, file, ensure_ascii=False)

# with open(f'text.json', encoding='utf-8') as file:
#     r = json.load(file)
# a = [r[i].get('name') for i in range(len(r))]
# print(a)

with open(f'data/0aff2a36e7d46789b39becff9dddf9e1.json') as file:
    r = json.load(file)
print(r.keys())


